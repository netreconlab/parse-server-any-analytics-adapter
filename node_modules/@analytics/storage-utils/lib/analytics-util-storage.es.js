import { get, set, remove } from '@analytics/global-storage-utils';
export { globalContext } from '@analytics/global-storage-utils';
import { hasLocalStorage } from '@analytics/localstorage-utils';
export { hasLocalStorage } from '@analytics/localstorage-utils';
import { hasCookies, getCookie, setCookie, removeCookie } from '@analytics/cookie-utils';
export { getCookie, setCookie, removeCookie, hasCookies } from '@analytics/cookie-utils';

function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(source, true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(source).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function parse(input) {
  var value;

  try {
    value = JSON.parse(input);

    if (typeof value === 'undefined') {
      value = input;
    }

    if (value === 'true') {
      value = true;
    }

    if (value === 'false') {
      value = false;
    }

    if (parseFloat(value) === value && _typeof(value) !== 'object') {
      value = parseFloat(value);
    }
  } catch (e) {
    value = input;
  }

  return value;
}

var ALL = '*';
var LOCAL_STORAGE = 'localStorage';
var COOKIE = 'cookie';
var GLOBAL = 'global'; // Verify support

var hasStorage = hasLocalStorage();
var hasCookiesSupport = hasCookies();
/**
 * Get storage item from localStorage, cookie, or window
 * @param  {string} key - key of item to get
 * @param  {object|string} [options] - storage options. If string location of where to get storage
 * @param  {string} [options.storage] - Define type of storage to pull from.
 * @return {Any}  the value of key
 */

function getItem(key) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (!key) return;
  var storageType = getStorageType(options); // Get value from all locations

  if (storageType === ALL) return getAll(key);
  /* 1. Try localStorage */

  if (useLocal(storageType)) {
    var value = localStorage.getItem(key);
    if (value || storageType === LOCAL_STORAGE) return parse(value);
  }
  /* 2. Fallback to cookie */


  if (useCookie(storageType)) {
    var _value = getCookie(key);

    if (_value || storageType === COOKIE) return parse(_value);
  }
  /* 3. Fallback to window/global. */


  return get(key);
}

function getAll(key) {
  return {
    cookie: parse(getCookie(key)),
    localStorage: parse(localStorage.getItem(key)),
    global: get(key)
  };
}
/**
 * Store values in localStorage, cookie, or window
 * @param {string} key - key of item to set
 * @param {*} value - value of item to set
 * @param {object|string} [options] - storage options. If string location of where to get storage
 * @param {string} [options.storage] - Define type of storage to pull from.
 * @returns {object} returns old value, new values, & location of storage
 */


function setItem(key, value) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (!key || typeof value === 'undefined') {
    return;
  }

  var data = {};
  var storageType = getStorageType(options);
  var saveValue = JSON.stringify(value);
  var setAll = storageType === ALL;
  /* 1. Try localStorage */

  if (useLocal(storageType)) {
    // console.log('SET as localstorage', saveValue)
    var values = {
      current: value,
      previous: parse(localStorage.getItem(key)) // Set LocalStorage item

    };
    localStorage.setItem(key, saveValue);

    if (!setAll) {
      return _objectSpread2({
        location: LOCAL_STORAGE
      }, values);
    } // Set object


    data[LOCAL_STORAGE] = values;
  }
  /* 2. Fallback to cookie */


  if (useCookie(storageType)) {
    // console.log('SET as cookie', saveValue)
    var cookieValues = {
      current: value,
      previous: parse(getCookie(key)) // Set Cookie

    };
    setCookie(key, saveValue);

    if (!setAll) {
      return _objectSpread2({
        location: COOKIE
      }, cookieValues);
    } // Set object


    data[COOKIE] = cookieValues;
  }
  /* 3. Fallback to window/global */


  var globalValues = {
    current: value,
    previous: get(key) // Set global value

  };
  set(key, value);

  if (!setAll) {
    return _objectSpread2({
      location: GLOBAL
    }, globalValues);
  } // Set object


  data[GLOBAL] = globalValues;
  return data;
}
/**
 * Remove values from localStorage, cookie, or window
 * @param {string} key - key of item to set
 * @param {object|string} [options] - storage options. If string location of where to get storage
 * @param {string} [options.storage] - Define type of storage to pull from.
 */

function removeItem(key) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (!key) return;
  var storageType = getStorageType(options);
  var removeAll = storageType === ALL;
  var locations = [];

  if (removeAll || useLocal(storageType)) {
    /* 1. Try localStorage */
    localStorage.removeItem(key);
    locations.push(LOCAL_STORAGE);
  }

  if (removeAll || useCookie(storageType)) {
    /* 2. Fallback to cookie */
    removeCookie(key);
    locations.push(COOKIE);
  }
  /* 3. Fallback to window/global */


  if (removeAll || useGlobal(storageType)) {
    remove(key);
    locations.push(GLOBAL);
  }

  return locations;
}

function getStorageType(options) {
  return typeof options === 'string' ? options : options.storage;
}

function useGlobal(storage) {
  return useType(storage, GLOBAL);
}

function useLocal(storage) {
  // If has localStorage and storage option not defined, or is set to 'localStorage' or '*'
  return hasStorage && useType(storage, LOCAL_STORAGE);
}

function useCookie(storage) {
  // If has cookies and storage option not defined, or is set to 'cookies' or '*'
  return hasCookiesSupport && useType(storage, COOKIE);
}

function useType(storage, type) {
  return !storage || storage === type || storage === ALL;
}
var index = {
  getItem: getItem,
  setItem: setItem,
  removeItem: removeItem
};

export default index;
export { ALL, LOCAL_STORAGE, COOKIE, GLOBAL, getItem, setItem, removeItem };
