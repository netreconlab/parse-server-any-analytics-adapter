{"version":3,"file":"analytics-util-cookie.module.js","sources":["../src/index.js"],"sourcesContent":["import { get, set, remove, undef } from '@analytics/global-storage-utils'\n\nconst COOKIE = 'cookie'\nconst tmp = '__x'\n\nlet isSupported = hasCookies()\n\n/**\n * Get a cookie value\n * @param  {string} name - key of cookie\n * @return {string} value of cookie\n */\nconst getCookie = cookie\n\n/**\n * Set a cookie value\n * @param {string} name  - key of cookie\n * @param {string} value - value of cookie\n * @param {string} days  - days to keep cookie\n */\nconst setCookie = cookie\n\n/**\n * Remove a cookie value.\n * @param {string} name  - key of cookie\n */\nfunction removeCookie(name) {\n  return isSupported ? cookie(name, '', -1) : remove(name) \n}\n\n/**\n * Check if browser has cookie support\n * @returns {boolean}\n */\nfunction hasCookies() {\n  if (typeof isSupported !== undef) {\n    return isSupported\n  }\n  try {\n    // Try to set cookie\n    cookie(tmp, tmp)\n    isSupported = document.cookie.indexOf(tmp) !== -1\n    // Cleanup cookie\n    removeCookie(tmp)\n  } catch (e) {\n    isSupported = false\n  }\n  return isSupported\n}\n\n/** \n  * Cookie setter & getter\n  * @version    1.0.4\n  * @date       2015-03-13\n  * @stability  3 - Stable\n  * @author     Lauri Rooden <lauri@rooden.ee>\n  * @license    MIT License\n  * Modified by David Wells\n  * @param {string} name \n  * @param {*} value \n  * @param {*} ttl - Time to live in seconds\n  * @param {*} path - Cookie domain\n  * @param {*} domain - Cookie domain\n  * @param {Boolean} secure - secure cookie\n  * @returns {*} value\n  * @example\n    cookie('test', 'a') // set\n    cookie('test', 'a', 60*60*24, '/api', '*.example.com', true) // complex set - cookie(name, value, ttl, path, domain, secure)\n    cookie('test') // get\n    cookie('test', '', -1) // destroy\n*/\nfunction cookie(name, value, ttl, path, domain, secure) {\n  if (typeof window === undef) return\n  const isSet = arguments.length > 1\n  /* If cookies not supported fallback to global */\n  if (!isSupported) (isSet) ? set(name, value) : get(name)\n  /* Set values */\n  if (isSet) {\n    // eslint-disable-next-line no-return-assign\n    return document.cookie = name + '=' + encodeURIComponent(value) +\n      // eslint-disable-next-line operator-linebreak\n        ((!ttl) ? '' :\n          // Has TTL set expiration on cookie\n          '; expires=' + new Date(+new Date() + (ttl * 1000)).toUTCString() +\n          // If path set path\n          ((!path) ? '' : '; path=' + path) +\n          // If domain set domain\n          ((!domain) ? '' : '; domain=' + domain) +\n          // If secure set secure\n          ((!secure) ? '' : '; secure'))\n  }\n  /* Get values */\n  return decodeURIComponent((('; ' + document.cookie).split('; ' + name + '=')[1] || '').split(';')[0])\n}\n\nexport {\n  COOKIE,\n  hasCookies,\n  setCookie,\n  getCookie,\n  removeCookie\n}\n"],"names":["COOKIE","isSupported","hasCookies","getCookie","cookie","setCookie","removeCookie","name","remove","undef","document","indexOf","e","value","ttl","path","domain","secure","window","isSet","arguments","length","set","get","encodeURIComponent","Date","toUTCString","decodeURIComponent","split"],"mappings":"sFAEMA,IAAAA,EAAS,SAGXC,EAAcC,IAOZC,EAAYC,EAQZC,EAAYD,EAMlB,SAASE,EAAaC,GACpB,OAAON,EAAcG,EAAOG,EAAM,IAAK,GAAKC,EAAOD,GAOrD,SAASL,IACP,UAAWD,IAAgBQ,EACzB,OAAOR,EAET,IAEEG,EArCQ,MAAA,OAsCRH,GAAgD,IAAlCS,SAASN,OAAOO,QAtCtB,OAwCRL,EAxCQ,OAyCR,MAAOM,GACPX,GAAc,EAEhB,OAAOA,EAwBT,SAASG,EAAOG,EAAMM,EAAOC,EAAKC,EAAMC,EAAQC,GAC9C,UAAWC,SAAWT,EAAtB,CACA,IAAMU,EAAQC,UAAUC,OAAS,EAIjC,OAFKpB,IAAckB,EAASG,EAAIf,EAAMM,GAASU,EAAIhB,IAE/CY,EAEKT,SAASN,OAASG,EAAO,IAAMiB,mBAAmBX,IAElDC,EAED,aAAe,IAAIW,MAAM,IAAIA,KAAgB,IAANX,GAAaY,eAEjDX,EAAa,UAAYA,EAAjB,KAERC,EAAe,YAAcA,EAAnB,KAEVC,EAAe,WAAL,IARL,IAWTU,qBAAqB,KAAOjB,SAASN,QAAQwB,MAAM,KAAOrB,EAAO,KAAK,IAAM,IAAIqB,MAAM,KAAK"}